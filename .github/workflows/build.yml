name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'  # Add support for pre-release tags
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, 386, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Set version
      id: set_version
      run: |
        # Try to get tag version
        TAG_VERSION=$(git describe --tags --exact-match 2>/dev/null || echo "")
        
        # If no tag is available, use date-time stamp (MMDDHHMMSS)
        if [ -z "$TAG_VERSION" ]; then
          DATETIME=$(date +'%m%d%H%M%S')
          VERSION="$DATETIME"
        else
          VERSION="$TAG_VERSION"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version set to: $VERSION"
        
        # Update version.go
        sed -i "s/Version = \".*\"/Version = \"$VERSION\"/" pkg/aliasctl/version.go
        cat pkg/aliasctl/version.go

    - name: Run tests
      run: go test ./...

    - name: Build
      env:
        CGO_ENABLED: 0
      run: |
        GOOS=${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'darwin' }}
        GOARCH=${{ matrix.arch }}
        
        # Define output filename with proper extension for Windows
        EXT=""
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          EXT=".exe"
        fi
        
        go build -o aliasctl-${{ matrix.os }}-${{ matrix.arch }}${EXT} \
          -ldflags "-s -w -X github.com/aliasctl/aliasctl/pkg/aliasctl.Version=$VERSION" \
          ./cmd/aliasctl

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aliasctl-${{ matrix.os }}-${{ matrix.arch }}
        path: aliasctl-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Determine Release Type
      id: release_type
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        
        # Check for draft flag
        if [[ $TAG == *"-draft" ]]; then
          echo "is_draft=true" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        
        # Check for prerelease flag
        elif [[ $TAG == *"-alpha"* || $TAG == *"-beta"* || $TAG == *"-rc"* ]]; then
          echo "is_draft=false" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        
        # Normal release
        else
          echo "is_draft=false" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          aliasctl-*/*
        draft: ${{ steps.release_type.outputs.is_draft }}
        prerelease: ${{ steps.release_type.outputs.is_prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}